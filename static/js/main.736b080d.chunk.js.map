{"version":3,"sources":["components/Map.js","components/NavBar.js","components/SideMenu.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onScriptLoad","bind","assertThisInitialized","_this2","map","window","google","maps","document","getElementById","id","options","url","URL","parameters","search","URLSearchParams","client_id","client_secret","v","locale","ll","query","fetch","then","res","json","places","response","groups","items","place","name","venue","address","location","lat","lng","onMapLoad","_this3","s","createElement","type","src","x","getElementsByTagName","parentNode","insertBefore","addEventListener","e","react_default","a","className","Component","NavBar","tabIndex","onClick","changeMenu","onKeyPress","SideMenu","_this$props","menu","onChangeInput","createInfoWindowFromList","showingPlaces","concat","placeholder","onChange","key","App","state","infoWindow","markerList","setState","marker","target","info","createInfoWindow","clearMarkers","setMap","markers","filter","includes","value","createMarkers","close","setContent","addListener","setMarker","ok","prefix","photos","suffix","content","setIcon","makeMarkerIcon","open","markerColor","MarkerImage","Size","Point","InfoWindow","defaultIcon","highlightedIcon","Marker","position","title","animation","Animation","DROP","icon","push","_this4","components_SideMenu","components_NavBar","components_Map","center","zoom","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.736b080d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.onScriptLoad = this.onScriptLoad.bind(this)\n    }\n\n    onScriptLoad() {\n        const map = new window.google.maps.Map(\n            document.getElementById(this.props.id),\n            this.props.options);\n            \n        const url = new URL(\"https://api.foursquare.com/v2/venues/explore\")\n        const parameters = {\n            client_id: \"XRSSA1AQTZ45PLHSXP3ZAWMKBKKX31S0YPBDWJYCIXXHSIJA\",\n            client_secrect: \"QBTVBE0BUBV4RD1LAHY0Q40I4ASPCOPBKQFC4MQKXWKVU4AK\",\n            query: \"food\",\n            ll: \"-8.129725,-34.902381\"\n        }\n        url.search = new URLSearchParams({\n            client_id: parameters.client_id,\n            client_secret: parameters.client_secrect, v: \"20181025\", locale: 'br',\n            ll: parameters.ll, query: parameters.query\n        })\n\n        fetch(url)\n            .then(res => res.json())\n            .then(res => {\n                let places = res.response.groups[0].items.map(place => ({\n                    name: place.venue.name,\n                    address: place.venue.location.address,\n                    lat: place.venue.location.lat,\n                    lng: place.venue.location.lng,\n                    id: place.venue.id\n                }))\n                this.props.onMapLoad(map, places)\n            })\n    }\n\n    componentDidMount() {\n        if (!window.google) {\n            let s = document.createElement('script');\n            s.type = 'text/javascript';\n            s.src = `https://maps.google.com/maps/api/js?key=AIzaSyDqnxrPFH-QNRfwryEntbFmlqAUL3-1dEE`;\n            let x = document.getElementsByTagName('script')[0];\n            x.parentNode.insertBefore(s, x);\n            // Below is important. \n            //We cannot access google.maps until it's finished loading\n            s.addEventListener('load', e => {\n                this.onScriptLoad()\n            })\n        } else {\n            this.onScriptLoad()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"map\" id={this.props.id} />\n        );\n    }\n}\n\nexport default Map","import React, { Component } from 'react';\n\nclass NavBar extends Component {\n    render(){\n        return (\n            <nav className=\"nav\">\n                <div className=\"nav-burger\" tabIndex=\"1\" \n                    onClick={this.props.changeMenu} \n                    onKeyPress={this.props.changeMenu}>\n                    <div className=\"bar\"></div>\n                    <div className=\"bar\"></div>\n                    <div className=\"bar\"></div>\n                </div>\n                <h1 className=\"title\">Recife Boa Viagem</h1>\n            </nav>\n        )\n    }\n}\n\nexport default NavBar","import React, { Component } from 'react';\n\nclass SideMenu extends Component {\n    render() {\n        const { menu, onChangeInput, createInfoWindowFromList, showingPlaces} = this.props\n        return (\n            <aside className={`side-menu ${menu ? \"visible\" : \"\"}`}>\n                <h2 className=\"menu-title\">Food Finder</h2>\n                <input className=\"food-finder\"\n                placeholder=\"Search for food here\"\n                type=\"text\" onChange={onChangeInput} tabIndex=\"2\"></input>\n                <ul className=\"food-list\">\n                    {showingPlaces.map(place => (\n                        <li \n                            tabIndex=\"3\"                                                                            \n                            className=  \"food-item\"\n                            key={place.name} \n                            id={place.id}\n                            onKeyPress={createInfoWindowFromList} \n                            onClick={createInfoWindowFromList}>{place.name}</li>\n                    ))}\n                </ul>\n            </aside>\n        )\n    }\n}\n\nexport default SideMenu","import React, { Component } from 'react';\nimport Map from './components/Map'\nimport NavBar from './components/NavBar'\nimport SideMenu from './components/SideMenu'\n\nclass App extends Component {\n  state = {\n    places: [],\n    showingPlaces: [],\n    menu: false,\n    infoWindow: null,\n    map: null,\n    markerList: [],\n  }\n\n  changeMenu = () => {\n    let menu = !this.state.menu\n    this.setState({ menu: menu })\n  }\n\n  createInfoWindow(marker, info, map) {\n    let infoWindow = this.state.infoWindow\n    infoWindow.close()\n    infoWindow.setContent('')\n    infoWindow.marker = marker\n    \n    infoWindow.addListener('closeclick', function () {\n      infoWindow.setMarker = null;\n    });\n    let url = new URL(`https://api.foursquare.com/v2/venues/${info.id}/photos`)\n    const parameters = {\n      client_id: \"XRSSA1AQTZ45PLHSXP3ZAWMKBKKX31S0YPBDWJYCIXXHSIJA\",\n      client_secrect: \"QBTVBE0BUBV4RD1LAHY0Q40I4ASPCOPBKQFC4MQKXWKVU4AK\",\n      v: \"20181025\"\n    }\n    url.search = new URLSearchParams({\n      client_id: parameters.client_id,\n      client_secret: parameters.client_secrect, v: \"20181025\"\n    })\n    \n    fetch(url)\n    .then(res => res.json())\n    .then(res => {\n      if (res.ok){\n        let prefix = res.response.photos.items[0].prefix\n        let size = 'width100'\n        let suffix = res.response.photos.items[0].suffix\n        url = new URL(`${prefix}${size}${suffix}`)\n        url.search = new URLSearchParams({\n          client_id: parameters.client_id,\n          client_secret: parameters.client_secrect, v: \"20181025\"\n        })\n        return url\n      }\n      else {\n        return 'https://via.placeholder.com/108x120.png?text=No+Image' //quota_exceeded\n      }\n    })\n    .then(res => (\n      `<div>\n        <img src=${res}/>\n        <h3>${info.name}</h3>\n        <p>${info.address}</p>\n      </div>`\n    ))\n    .then(content => {\n      infoWindow.setContent(content)\n      this.state.markerList.map(marker => (marker.setIcon(this.makeMarkerIcon('FFFF24'))))\n      marker.setIcon(this.makeMarkerIcon('FFFFFF'))\n      infoWindow.open(map, marker)\n    })  \n  }\n\n  createInfoWindowFromList = (e) => {\n    let marker = this.state.markerList[e.target.id]\n    let info = this.state.showingPlaces[e.target.id]\n    this.createInfoWindow(marker, info, this.state.map)\n  }\n\n  makeMarkerIcon(markerColor) {\n    var markerImage = new window.google.maps.MarkerImage(\n      'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|' + markerColor +\n      '|40|_|%E2%80%A2',\n      new window.google.maps.Size(21, 34),\n      new window.google.maps.Point(0, 0),\n      new window.google.maps.Point(10, 34),\n      new window.google.maps.Size(21, 34));\n    return markerImage;\n  }\n  onChangeInput = (e) => {\n    let clearMarkers = this.state.markerList;\n    clearMarkers = clearMarkers.map(marker => {\n      marker.setMap(null);\n      return marker;\n    });\n\n    this.setState({ markers: clearMarkers });\n    let showingPlaces = this.state.places.filter(place => (\n      place.name.includes(e.target.value)\n    ))\n    \n    this.createMarkers(this.state.map, showingPlaces)\n  }\n\n  createMarkers(map, showingPlaces){\n    let marker, markerList = []\n    this.setState({ map: map, infoWindow: new window.google.maps.InfoWindow() })\n    const defaultIcon = this.makeMarkerIcon;\n    const highlightedIcon = this.makeMarkerIcon;\n    showingPlaces.map((place, id) => {\n      marker = new window.google.maps.Marker({\n        position: { lat: place.lat, lng: place.lng },\n        map: map,\n        title: place.name,\n        animation: window.google.maps.Animation.DROP,\n        icon: defaultIcon('FFFF24')\n      })\n      markerList.push(marker)\n      marker.addListener('click', e => {\n        this.createInfoWindow(markerList[id], showingPlaces[id], map)\n      })\n      marker.addListener('mouseover', function () {\n        this.setIcon(highlightedIcon('FFFFFF'));\n      });\n      marker.addListener('mouseout', function () {\n        this.setIcon(defaultIcon('FFFF24'));\n      });\n    })\n    this.setState({ markerList: markerList, showingPlaces: showingPlaces })\n  }\n\n  render() {\n    return (\n      <div>\n        \n        <SideMenu \n          menu={this.state.menu}\n          onChangeInput={this.onChangeInput}\n          createInfoWindowFromList={this.createInfoWindowFromList}\n          showingPlaces={this.state.showingPlaces}/>\n\n        <div className={`wrapper ${this.state.menu ? \"slide\" : \"\"}`}>\n          <NavBar changeMenu={this.changeMenu}/>\n          <Map\n            id=\"MapRecife\"\n            options={{\n              center: { lat: -8.129725, lng: -34.902381 },\n              zoom: 16\n            }}\n            onMapLoad={(map, places) => {\n              this.setState({ places: places, showingPlaces: places })\n              this.createMarkers(map, places)\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}